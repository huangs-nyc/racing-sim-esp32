void drawTrack() {
  // Track parameters
  float trackWidth = 60;
  
  // Draw outer and inner track borders
  noFill();
  strokeWeight(trackWidth);
  strokeCap(ROUND);
  strokeJoin(ROUND);
  
  // Asphalt color
  stroke(69, 69, 69);
  
  // Main track path using bezier curves to create waves
  beginShape();
  vertex(0, height/2);
  
  // Create a series of bezier curves that form a wave pattern
  // Each wave consists of two bezier curves for smooth transition
  float waveHeight = 150;
  float segmentWidth = width/4;
  
  // Wave 1
  bezierVertex(segmentWidth/3, height/2 - waveHeight, 
               segmentWidth*2/3, height/2 - waveHeight,
               segmentWidth, height/2);
               
  bezierVertex(segmentWidth*4/3, height/2 + waveHeight,
               segmentWidth*5/3, height/2 + waveHeight,
               segmentWidth*2, height/2);
               
  // Wave 2
  bezierVertex(segmentWidth*7/3, height/2 - waveHeight,
               segmentWidth*8/3, height/2 - waveHeight,
               segmentWidth*3, height/2);
               
  bezierVertex(segmentWidth*10/3, height/2 + waveHeight,
               segmentWidth*11/3, height/2 + waveHeight,
               segmentWidth*4, height/2);
  
  endShape();
  
  // Draw track edges
  strokeWeight(3);
  
  // Top edge (white)
  stroke(255, 255, 255);
  float offset = trackWidth/2;
  beginShape();
  vertex(0, height/2 - offset);
  bezierVertex(segmentWidth/3, (height/2 - waveHeight) - offset, 
               segmentWidth*2/3, (height/2 - waveHeight) - offset,
               segmentWidth, height/2 - offset);
               
  bezierVertex(segmentWidth*4/3, (height/2 + waveHeight) - offset,
               segmentWidth*5/3, (height/2 + waveHeight) - offset,
               segmentWidth*2, height/2 - offset);
               
  bezierVertex(segmentWidth*7/3, (height/2 - waveHeight) - offset,
               segmentWidth*8/3, (height/2 - waveHeight) - offset,
               segmentWidth*3, height/2 - offset);
               
  bezierVertex(segmentWidth*10/3, (height/2 + waveHeight) - offset,
               segmentWidth*11/3, (height/2 + waveHeight) - offset,
               segmentWidth*4, height/2 - offset);
  endShape();
  
  // Bottom edge (red)
  stroke(255, 0, 0);
  beginShape();
  vertex(0, height/2 + offset);
  bezierVertex(segmentWidth/3, (height/2 - waveHeight) + offset, 
               segmentWidth*2/3, (height/2 - waveHeight) + offset,
               segmentWidth, height/2 + offset);
               
  bezierVertex(segmentWidth*4/3, (height/2 + waveHeight) + offset,
               segmentWidth*5/3, (height/2 + waveHeight) + offset,
               segmentWidth*2, height/2 + offset);
               
  bezierVertex(segmentWidth*7/3, (height/2 - waveHeight) + offset,
               segmentWidth*8/3, (height/2 - waveHeight) + offset,
               segmentWidth*3, height/2 + offset);
               
  bezierVertex(segmentWidth*10/3, (height/2 + waveHeight) + offset,
               segmentWidth*11/3, (height/2 + waveHeight) + offset,
               segmentWidth*4, height/2 + offset);
  endShape();
  
  // Add start/finish line
  strokeWeight(4);
  stroke(255, 255, 255);
  pushMatrix();
  translate(100, height/2);
  for(int i = -30; i < 30; i += 8) {
    line(i, -20, i, 20);
  }
  popMatrix();
}
